# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from im_msgs/SetRGBRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetRGBRequest(genpy.Message):
  _md5sum = "661adc9cdaa83965483792df034da13d"
  _type = "im_msgs/SetRGBRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
int8 LEDOFF    = 0
int8 RED       = 1
int8 GREEN     = 2
int8 YELLOW    = 3
int8 BLUE      = 4
int8 PINK      = 5
int8 TURQUOISE = 6
int8 WHITE     = 7


int8 MANUAL      = 0
int8 ON          = 1
int8 AUTONOMOUS  = 2
int8 TELEOP      = 3
int8 WANDER      = 4
int8 LOW_BATTERY = 5
int8 CHARGING    = 6
int8 CHARGED     = 7
int8 ERROR       = 8

int8 mode

float32 frequency

int8 times
int8 color
"""
  # Pseudo-constants
  LEDOFF = 0
  RED = 1
  GREEN = 2
  YELLOW = 3
  BLUE = 4
  PINK = 5
  TURQUOISE = 6
  WHITE = 7
  MANUAL = 0
  ON = 1
  AUTONOMOUS = 2
  TELEOP = 3
  WANDER = 4
  LOW_BATTERY = 5
  CHARGING = 6
  CHARGED = 7
  ERROR = 8

  __slots__ = ['mode','frequency','times','color']
  _slot_types = ['int8','float32','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode,frequency,times,color

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetRGBRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = 0
      if self.frequency is None:
        self.frequency = 0.
      if self.times is None:
        self.times = 0
      if self.color is None:
        self.color = 0
    else:
      self.mode = 0
      self.frequency = 0.
      self.times = 0
      self.color = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_bf2b.pack(_x.mode, _x.frequency, _x.times, _x.color))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.mode, _x.frequency, _x.times, _x.color,) = _struct_bf2b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_bf2b.pack(_x.mode, _x.frequency, _x.times, _x.color))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.mode, _x.frequency, _x.times, _x.color,) = _struct_bf2b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_bf2b = struct.Struct("<bf2b")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from im_msgs/SetRGBResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetRGBResponse(genpy.Message):
  _md5sum = "ba0ef05866f4fc5d7e82544d27e5cfbc"
  _type = "im_msgs/SetRGBResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 ret

"""
  __slots__ = ['ret']
  _slot_types = ['int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ret

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetRGBResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ret is None:
        self.ret = 0
    else:
      self.ret = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_b.pack(self.ret))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.ret,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_b.pack(self.ret))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.ret,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b = struct.Struct("<b")
class SetRGB(object):
  _type          = 'im_msgs/SetRGB'
  _md5sum = '09e0749c01af9e427f1a861c70df57ff'
  _request_class  = SetRGBRequest
  _response_class = SetRGBResponse
